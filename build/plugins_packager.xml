<?xml version="1.0" encoding="UTF-8"?>
<!-- ==================================================================  -->
<!-- redSLIDER.0 packager                                              -->
<!-- This PHING build file generates the redSLIDER.0 Plugins package   -->
<!-- To use in your environment do the following steps:                  -->
<!--    Change the following variables in build.properties file          -->
<!--            (copy variables from build.properties.dist )             -->
<!--    - change the version in variable comp.version                    -->
<!--    - change the source folder path in variable repo.dir             -->
<!--    - change the package folder path in variable package.dir         -->
<!--    - execute this PHING build file                                  -->
<!-- ==================================================================  -->

<project name="plugins_packager" default="pack">
    <includepath classpath="./phingtasks" />
    <taskdef name="lessc" classname="rych.tasks.LessCompilerTask" />
    <taskdef name="yuic" classname="rych.tasks.YuiCompressorTask" />

    <!-- ============================================  -->
    <!-- Create packages folder                        -->
    <!-- ============================================  -->
    <target name="prepare">
        <if>
            <not>
                <isset property="package.dir" />
            </not>
            <then>
                <fail msg="package.dir not specified, specify package.dir in build.properties file" />
            </then>
        </if>

        <!-- Folder where the redSLIDER2 repository is located  -->
        <property
                name="extpath"
                value="../"
                override="true"/>

        <xmlproperty file="${extpath}/extensions/${extension}.xml" prefix="extensionDetails" keepRoot="false" />

        <property
                name="version"
                value="${extensionDetails.version}"
                override="true"/>

        <!-- Temp dir to create packages -->
        <property
                name="tmpdir"
                value=".tmp"
                override="true"/>

        <!-- Check if the temp folder exists. If not, create it -->
        <if>
            <available file="${tmpdir}" type="dir"/>
            <then>
                <echo msg="Removing old ${tmpdir}"/>
                <delete dir="${tmpdir}"/>
            </then>
        </if>
        <echo msg="Making directory to store the temporary packages at ${tmpdir}"/>
        <mkdir dir="${tmpdir}"/>
    </target>

    <!-- ============================================  -->
    <!-- Target: build                                 -->
    <!-- ============================================  -->
    <!-- Loops through folders creating plugins packages -->

    <target name="build" depends="prepare">
        <!-- Loop through plugins groups -->
        <foreach param="group_name" target="plugin_loop">
            <fileset dir="${extpath}/extensions/plugins">
                <type type="dir" />
                <depth max="0" min="0" />
            </fileset>
        </foreach>

        <if>
            <available file="${package.dir}/${extension}-${version}-plugins" type="dir" />
            <then>
                <delete dir="${package.dir}/${extension}-${version}-plugins"/>
            </then>
        </if>
    </target>

    <target name="plugin_loop" description="Loops through plugins folders inside groups">
        <mkdir dir="${tmpdir}/${group_name}" />

        <!-- Loop through plugins -->
        <foreach param="plugin_name" target="plugin_packager">
            <fileset dir="${extpath}/extensions/plugins/${group_name}">
                <type type="dir" />
                <depth max="0" min="0" />
            </fileset>
        </foreach>
    </target>

    <target name="plugin_packager" description="Packages the extension for delivery">
        <xmlproperty file="${extpath}/extensions/plugins/${group_name}/${plugin_name}/${plugin_name}.xml" prefix="pluginmanifest" keepRoot="false" />
        <property
                name="plugin_version"
                value="${pluginmanifest.version}"
                override="true"/>

        <echo msg="Working Plugin: ${plugin_name}" />

        <!-- Working on LESS if available -->
        <if>
            <available file="${extpath}/build/media/plugins/${group_name}/${plugin_name}/less" type="dir" />
            <then>
                <trycatch>
                    <try>
                        <!-- Compiler LESS to CSS -->
                        <lessc targetdir="${tmpdir}/${group_name}/${group_name}_${plugin_name}/media/css">
                            <fileset dir="${extpath}/build/media/plugins/${group_name}/${plugin_name}/less">
                                <include name="*.less" />
                            </fileset>
                        </lessc>
                        <!-- Create minified CSS for these file -->
                        <yuic targetdir="${tmpdir}/${group_name}/${group_name}_${plugin_name}/media/css">
                            <fileset dir="${tmpdir}/${group_name}/${group_name}_${plugin_name}/media/css">
                                <include name="*.css" />
                                <exclude name="*.min.css" />
                            </fileset>
                        </yuic>
                    </try>
                    <catch>
                    </catch>
                </trycatch>
            </then>
        </if>
        <!-- Copy other media files -->
        <if>
            <available file="${extpath}/build/media/plugins/${group_name}/${plugin_name}" type="dir" />
            <then>
                <copy todir="${tmpdir}/${group_name}/${group_name}_${plugin_name}/media">
                    <fileset dir="${extpath}/build/media/plugins/${group_name}/${plugin_name}">
                        <include name="**" />
                        <exclude name=".*" />
                        <exclude name="less" />
                        <exclude name="less/**" />
                    </fileset>
                </copy>
            </then>
        </if>

        <echo msg="Copying plugins..."/>
        <copy todir="${tmpdir}/${group_name}/${group_name}_${plugin_name}">
            <fileset dir="${extpath}/extensions/plugins/${group_name}/${plugin_name}">
                <include name="**"/>
                <exclude name=".*"/>
            </fileset>
        </copy>

        <zip 
            destfile="${tmpdir}/${group_name}/${group_name}_${plugin_name}_${plugin_version}.zip"
            basedir="${tmpdir}/${group_name}/${group_name}_${plugin_name}">
            <fileset dir="${tmpdir}/${group_name}/${group_name}_${plugin_name}">
                <include name="**" />
                <exclude name=".*" />
            </fileset>
        </zip>

        <copy file="${tmpdir}/${group_name}/${group_name}_${plugin_name}_${plugin_version}.zip" tofile="${package.dir}/${group_name}/${group_name}_${plugin_name}_${plugin_version}.zip" />

        <!-- clean up plugins already added in the main extension package -->
        <delete file="${package.dir}/${group_name}/redslider_sections_section_redevent_${plugin_version}.zip" />
        <delete file="${package.dir}/${group_name}/redslider_sections_section_redform_${plugin_version}.zip" />
        <delete file="${package.dir}/${group_name}/redslider_sections_section_redshop_${plugin_version}.zip" />

        <echo msg="Files copied and compressed in build directory OK!"/>
    </target>

    <target name="clean-tmp">
        <delete dir="${tmpdir}"/>
    </target>

    <target name="compress-clean" depends="clean-tmp">
        <!-- needed for external cleaning and compressing -->
    </target>

    <target name="dist" depends="build, compress-clean">
        <echo msg="Modules build successful!"/>
    </target>

    <target name="pack">
        <!-- Do initialization stuff -->
        <if>
            <not>
                <available file="build.properties" type="file" />
            </not>
            <then>
                <fail msg="File not found: build.properties" />
            </then>
        </if>

        <property file="build.properties" override="true"/>

        <property
                name="extension"
                value="${comp.name}"
                override="true"/>

        <phingcall target="dist" />
    </target>

    <target name="autopack">
        <property
                name="package.dir"
                value=".dist"
                override="true"/>

        <property
                name="extension"
                value="redslider"
                override="true"/>

        <property
                name="joomla.version"
                value="j3_and_j25"
                override="true"/>

        <property
                name="package.delete"
                value="true"
                override="false"/>

        <if>
            <and>
                <available file="${package.dir}" type="dir"/>
                <equals arg1="${package.delete}" arg2="1" />
            </and>
            <then>
                <echo msg="Removing old autopack folder"/>
                <delete dir="${package.dir}"/>
            </then>
        </if>

        <phingcall target="dist" />
    </target>
</project>